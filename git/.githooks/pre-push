#!/bin/bash

# This hook prevents accidentally pushing WIP code to non-wip branches. It checks if the target branch is a wip branch, 
# if not, it prevents pushes which add any of the blacklisted substrings to the repository.
#
# NOTE: Use --no-verify option to bypass this hook
# 
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local oid> <remote ref> <remote oid>

remote="$1"
url="$2"

# Substrings which cause a push to be rejected in pushes to non-wip branches
blacklist=("WQ:")

zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')

echo >&2 "pre-commit hook: Checking push to '$remote' with URL '$url'"

while read local_ref local_oid remote_ref remote_oid
do
	echo >&2 "pre-commit hook: local_ref='$local_ref'"
	echo >&2 "pre-commit hook: local_oid='$local_oid'"
	echo >&2 "pre-commit hook: remote_ref='$remote_ref'"
	echo >&2 "pre-commit hook: remote_oid='$remote_oid'"

	is_remote_wip=$(echo "$remote_ref" | grep -q "/wip/"; echo $?)

	if test "$local_oid" = "$zero"
	then
		# Handle delete
		echo >&2 "pre-commit hook: Deleting $local_ref"
		:
	else
		if test "$remote_oid" = "$zero"
		then
			# New branch, examine all commits
			echo >&2 "pre-commit hook: New branch $local_ref, examining all commits"

			# TODO: What if the remote we're pushing to ISN'T origin?
			# Find the nearest commit that has been pushed to origin
			ancestor_commit=$(git rev-list $local_oid --not --remotes=origin | tail -n1)

			if [ -n "$ancestor_commit" ]; then
				range="$ancestor_commit..$local_oid"
			else
				# TODO: When can this happen? When NOTHING has been pushed to origin? Then we should look at ALL commits
				# TODO: What happens with a force push to an existing branch with a new unrelated history?
				range="$local_oid"
			fi
		else
			# TODO: Is this code path needed, can the above path be used in both cases?
			# Update to existing branch, examine new commits
			echo >&2 "pre-commit hook: Updating $local_ref, examining new commits"
			range="$remote_oid..$local_oid"
		fi

		echo >&2 "pre-commit hook: Checking commits in $range"

		# TODO: Check $is_remote_wip
		if test -n "$is_remote_wip"
		then
			echo >&2 "pre-commit hook: Remote branch is a WIP branch, skipping checks"
		else 
			# Check for WIP commit
			commit=$(git rev-list -n 1 --grep '^WIP' "$range")
			if test -n "$commit"
			then
				echo >&2 "pre-commit hook: Found WIP commit in $local_ref, not pushing"
				exit 1
			else 
				echo >&2 "pre-commit hook: No issues found, continuing"
			fi

			# Check for blacklited substrings in the contents of the pushed files
			files=$(git diff --name-only "$range")
			for file in $files; do
				echo >&2 "pre-commit hook: Checking $file"
				for pattern in "${blacklist[@]}"; do
					if git show "$local_oid:$file" | grep -q "$pattern"; then
						echo >&2 "pre-push hook: Found '$pattern' in $file, not pushing"
						exit 1
					fi
				done
			done
		fi
	fi
done

exit 0
